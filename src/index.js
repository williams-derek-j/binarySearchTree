import Tree from './Tree/Tree'

function generateGray(n) {
    const total = 1 << n;
    const out = [];
    for (let i = 0; i < total; i++) {
        // binary-reflected Gray code
        const g = i ^ (i >> 1);
        // convert to n-bit binary string
        let bits = g.toString(2).padStart(n, '0');
        // reverse the bit order
        bits = bits.split('').reverse().join('');
        out.push(bits);
    }
    return out;
}

let gray = generateGray(5);
console.log(gray)
let result
const test = new Tree([1,3,4,5,6,6.1,6.25,6.4,6.5,6.6,7,10,13,14,15,16,17,18,19,18.5])
test.print(test.root)
console.log('root', test.root)
console.log('find 13', test.find(13))
console.log('find 15', test.find(15))
console.log('find 6', test.find(6))
console.log('root', test.root)
test.print(test.root)
console.log('append 0')
test.append(0)
test.print(test.root)
console.log('append -1')
test.append(-1)
test.print(test.root)
console.log('root', test.root)
// console.log('root', test.root)
// console.log('root', test.root)
// console.log('find 1', test.find(1))
// console.log('append 3')
// test.append(3)
// test.print(test.root)
// console.log('find', test.find(0))
// console.log('append 6.39')
// test.append(6.39)
// test.print(test.root)
// console.log('append .389')
// test.append(6.389)
// test.print(test.root)
// console.log('append .379')
// test.append(6.379)
// test.print(test.root)
// console.log('append 6.369')
// test.append(6.369)
// test.print(test.root)
// console.log('find 6', test.find(6), test.find(6).left, test.find(6).right)
// console.log('append 6.359')
// test.append(6.359)
// test.print(test.root)
// console.log('-----------------------------------------find', test.find(6.369))
// console.log('root', test.root)
// console.log('append 6.349')
// test.append(6.349)
// test.print(test.root)
// // test.print(test.root)
// // console.log('test:', test)
// console.log('append 8')
// test.append(8)
// // test.print(test.root)
// console.log('append 7')
// test.append(7)
// // test.print(test.root)
// console.log('append 7.5')
// test.append(7.5)
// test.print(test.root)
// console.log('root', test.root)
// console.log('append 8.1')
// test.append(8.1)
// // test.print(test.root)
// console.log('append 8.01')
// test.append(8.01)
// test.print(test.root)
// console.log('append 8.11')
// test.append(8.11)
// // test.print(test.root)
// console.log('append 6.9')
// test.append(6.9)
// // test.print(test.root)
// console.log(test.find(13))
// console.log(test.find(10))
// test.print(test.root)
// test.print(test.root)
// // console.log(test.find(13))
// console.log('root', test.root)
// console.log(test.find(13))
// test.print(test.root)
// console.log('root', test.root)
// // console.log('traverse io ^^^^', test.traverse(console.log))
// // console.log('---')
// // console.log('traverse preo ^^^', test.traverse(console.log, 'preorder'))
// // console.log('---')
// // console.log('traverse posto ^^^', test.traverse(console.log, 'postorder'))
// console.log('find 13:', test.find(13))
// console.log('find 10:', test.find(10))
// console.log('find 14:', test.find(14))
// console.log('find 8.1:', test.find(8.1))
// console.log('find 6.25', test.find(6.25))
// console.log('find 5', test.find(5))
// console.log('find 6', test.find(6))
// console.log('find 1', test.find(1))
// console.log('find 3', test.find(3))
// console.log('find 6.1', test.find(6.1))
// // console.log('remove 13')
// // test.remove(13)
// // test.print(test.root)
// // console.log('removeAll 8.1')
// // test.remove(8.1, true)
// // test.print(test.root)
// console.log('append 5.01')
// test.append(5.01)
// test.print(test.root)
// console.log('remove 3')
// test.remove(3)
// test.print(test.root)
// console.log('remove 9')
// test.remove(9)
// test.print(test.root)
// console.log('remove 6 again')
// test.remove(6)
// test.print(test.root)
// console.log('remove 9', result = test.remove(9))
// test.remove(9)
// test.print(test.root)
// console.log('append 11')
// test.append(11)
// test.print(test.root)
// console.log('append 12')
// test.append(12)
// test.print(test.root)
// console.log('fin', test.root)
// // console.log(test.isBalanced(test.find(7)))
